
layout 폴더와 views 폴더는 직접생성함.

layout폴더에는 헤더 푸터 사이드바 같이 고정된걸 작업

views에는 router 형식 ( SPA 방식으로 컨텐츠만 바뀜 ) 페이지를 작업
views 안에 들어있는 페이지들은 기본구성이 <템플릿 /> <스크립트 /> 이며  <템플릿> 안에 html 코드를 입력 아래 <스크립트>에는 name을 지정해준다.

APP.vue 스크립트에는 layout 폴더에있는 고정시킨걸 임포트시킨다 그 후 아래  익스포트 디폴트 안 컴포넌트에 임포트한것을 넣어준다. ex) import test from ...~~ // components: {test}

그후 APP.vue 템플릿 안에 임포트한것을 사용한다. <test /> 그후 라우터뷰에 쓰일 div공간을 따로만들어준다

<div id="content" class="content">
        <router-view>


        </router-view>
      </div>

router.js 생성후 import Vue from "vue"; / import VueRouter from "vue-router"; 뷰와 뷰 라우터를 임포트시키고 views에 만든 라우터페이지들 역시 임포트시킨다

Vue.use(VueRouter); 를 이용해 VUe와 VueRouter를 사용하고 

새로운 변수에 생성시킨다 

const router = new VueRouter({
    mode : "history",
    routes : [
        {path:"/",component:Home},
        {path:"/about",component:About}
    ]

});
export default router;

path부분이 주소이고 컴포넌트 부분이 임포트시킨 것들을 사용하는공간이다
마지막으로 변수를 사용하여하니까 익스포트 디폴트값에 만든 변수이름을 넣어준다. 

main.js로 와서 import router from './router' 라우터를 임포트시키고 아래 만들어져있는 Vue 생성자에 임포트시킨 router을 넣어준다. 

CSS는 App.vue에서 바꾼다


//////////////////////////////////////////////////


익스포트 디폴트안에 data(){} 함수를 만들어 함수안에 리턴시킨후 자기가 쓰고싶은 변수들을 저장할수있다.
ex) data(){ return{
    a : " apple " ,
    b : " banana " ,
}}
후에 템플릿 어디에서나 {{}} 대괄호 2개에 값을넣어 사용이 가능하다. {{a}} => html에는 apple로 표기됨


값을 받아올때는 input 같은경우는 스프링에서 원래 value로 받아오지만 Vue 에서는 v-model 로 받아온다.
onclick 같이 함수 바인딩시키는것은 @click로 사용 골뱅이를 사용한다.
@change 같은 이벤트도있다 ( 바뀔때마다 로직 실행 )

Vue에서는 함수선언하는건 methods: {} 안에다가 모든 메소드를 선언한다. 
methods: { getVal(){로직 ~~  } }

스크립트에서 값을 바인딩해서 받아올때는 this.바인딩값 으로 this를 붙여준다. // Home.Vue 27번째줄


https://kr.vuejs.org/v2/guide/instance.html
라이프 사이클을 통하여 어느 순서에 로직을 짤수있음. ex) create쪽에서 DB바인딩한다고함

watch:{ 변수(){ 로직 } } => 변수값을 계속 모니터링하다가 값이 바뀌면 바로 바인딩하여 얻어올수있음 // Home.Vue 19줄


v-for 사용법은 :key="데이터" :value="데이터.변수"[선택] v-for="(데이터,인덱스) in 반복할배열변수 


v-if 와 v-show의 비교 
if는 조건에 만족하지않으면 렌더링조차안함 show는 렌더링은하지만 보여주지않음
